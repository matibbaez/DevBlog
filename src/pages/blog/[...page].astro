---
import { getCollection } from "astro:content";
import config from "../../config.mjs";

import Base from "../../layouts/Base.astro";
import Post from "../../components/blog/Post.astro";

// Usar el tipo predeterminado de las entradas de contenido para las publicaciones de blog
interface BlogEntry {
  title: string;
  pubDate: Date;
  intro: string;
  tag: string;
  author: { collection: string; id: string };
  image: { height: number; src: string; width: number; format: string };
}

// Página con las entradas de blog
interface Page {
  data: BlogEntry[];
  url: {
    prev: string | null;
    next: string | null;
  };
}

// Obtener las rutas estáticas con paginación
export async function getStaticPaths({ paginate }) {
  const blogEntries = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  return paginate(blogEntries, { pageSize: config.postsPerPage });
}

// Usar las propiedades con el tipo explícito
const { page } = Astro.props as { page: Page };
---
<Base>
  <section class="container mx-auto max-w-screen-lg px-7 py-10">
    {page.data.map((post, index) => (
      <Post postData={post} num={index} />
    ))}
    <div class="flex flex-row justify-center gap-7">
      {page.url.prev && (
        <a
          href={page.url.prev}
          class="text-[16px] bg-transparent border-devblog-secondary border-[1px] leading-none rounded-full py-3 px-5 text-devblog-secondary hover:bg-devblog-accent hover:border-devblog-accent hover:text-devblog-white transition-all duration-300"
        >
          Anterior
        </a>
      )}
      {page.url.next && (
        <a
          href={page.url.next}
          class="text-[16px] bg-transparent border-devblog-secondary border-[1px] leading-none rounded-full py-3 px-5 text-devblog-secondary hover:bg-devblog-accent hover:border-devblog-accent hover:text-devblog-white transition-all duration-300"
        >
          Siguiente
        </a>
      )}
    </div>
  </section>
</Base>

